<?php

/**
 * @file Two-factor authentication for Drupal.
 */

/**
 * Implements hook_menu().
 */
function tfa_menu() {
  $items['system/tfa/%/%'] = array(
    'title' => 'Two-Factor Authentication',
    'page callback' => 'tfa_begin',
    'page arguments' => array(2, 3),
    'access callback' => 'tfa_entry_access',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'tfa.pages.inc',
  );
  $items['admin/config/people/tfa'] = array(
    'title' => 'Two-factor Authentication',
    'description' => 'TFA process settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_admin_settings'),
    'access arguments' => array('admin tfa settings'),
    'file' => 'tfa.pages.inc',
  );
  return $items;
}

/**
 * Validate access to TFA code entry form.
 */
function tfa_entry_access($uid, $check_hash) {
  // Generate a hash for this account.
  $account = user_load($uid);
  $hash = tfa_login_hash($account);
  // Hash must be valid and the code must have been created within the day.
  return ($hash == $check_hash);// @todo && !empty($code) && ($code['created'] > REQUEST_TIME - 86400);
}

/**
 * Implements hook_permission().
 */
function tfa_permission() {
  return array(
    'skip tfa' => array(
      'title' => t('Skip TFA process'),
      'description' => t('Skip the Two-factor authentication process and authenticate as normal.'),
    ),
    'admin tfa settings' => array(
      'title' => t('Administer TFA'),
      'description' => t('Configure the TFA process'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Get account's TFA settings.
 *
 * @param  $account
 * @return array with keys: type, created, codedata, accepted
 */
function tfa_get_settings($account) {
  $result = db_query("SELECT type, created, codedata, accepted FROM {tfa} WHERE uid = :uid", array(':uid' => $account->uid))->fetchAssoc();
  if (!empty($result)) {
    return $result;
  }
  return FALSE;
}


function tfa_get_process($account, $context = array()) {
  // @todo static
  $plugins = array();
  if (empty($context)) {
    // @todo pull from account/settings
    $plugins = array(
      'login' => 'TfaDeviceAuth',
      'validate' => 'TfaEmail',
    );
  }
  $context = array(
    'uid'     => $account->uid,
    'account' => $account,
  );
  $tfa = new Tfa($plugins, $context);
  return $tfa;
}

/**
 * Implements hook_tfa_api() for itself.
 */
function tfa_tfa_api() {
  return array(
    'tfa_email' => array(
      'class' => 'TfaEmail',
      'name' => 'Email',
    )
  );
}

function tfa_login_allowed($account) {
  // TFA master login allowed switch is set by tfa_login().
  if (isset($_SESSION['tfa'][$account->uid]['login']) && $_SESSION['tfa'][$account->uid]['login'] === TRUE) {
    return TRUE;
  }
  // Check if TfaLoginPlugins will allow login.
  $tfa = tfa_get_process($account);
  return $tfa->loginAllowed() === TRUE;
}

/**
 * Implements hook_user_login().
 */
function tfa_user_login(&$edit, $account) {
  global $user;

  $tfa = tfa_get_process($account);
  // if (!$tfa->loginAllowed($account) then tfa_logout()
  // elseif ($tfa->beginTfa($account))
  //   redirect to tfa callback

  //if (variable_get('tfa_required', 0) && !user_access('skip tfa', $account) && !tfa_ready($account)) {
  if (variable_get('tfa_required', 0) && !user_access('skip tfa', $account) && !$tfa->ready()) {
    tfa_logout();
    drupal_set_message(t('Login disallowed till your account is setup for TFA. Contact a site administrator.'), 'error');
    drupal_goto('user');
  }
  //elseif (!user_access('skip tfa', $account) && tfa_ready($account)) {
  elseif (!user_access('skip tfa', $account) && !tfa_login_allowed($account)) {
    // Log out user and restart flood events.
    tfa_logout();
    flood_clear_event('tfa_validate');
    flood_register_event('tfa_begin');

    $login_hash = tfa_login_hash($account);

    // Hold onto destination and unset GET parameter.
    $query = drupal_get_query_parameters();
    if (arg(0) == 'user' && arg(1) == 'reset') {
      $query = array('destination' => 'user/' . $account->uid . '/edit');
    }
    unset($_GET['destination']);
    drupal_goto('system/tfa/' . $account->uid . '/' . $login_hash, array('query' => $query));
  }
}

/**
 * Log out the user. Similar to user_logout() but doesn't redirect.
 */
function tfa_logout() {
  global $user;
  watchdog('tfa', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();
  // Force anonymous user.
  $user = drupal_anonymous_user();
}

/**
 * Authenticate the user.
 *
 * @param $account User account object.
 */
function tfa_login($account) {
  global $user;

  $user = $account;
  // Update the user table timestamp noting user has logged in.
  $user->login = REQUEST_TIME;
  db_update('users')
    ->fields(array('login' => $user->login))
    ->condition('uid', $user->uid)
    ->execute();

  // Regenerate the session ID to prevent against session fixation attacks.
  drupal_session_regenerate();

  // Set authenticated context.
  $_SESSION['tfa'][$user->uid]['login'] = TRUE;

  // Truncate flood for user.
  flood_clear_event('tfa_send');
  flood_clear_event('tfa_validate');
  $edit = array();
  user_module_invoke('login', $edit, $user);
}

/**
 * Implements hook_help().
 */
function tfa_help($path, $arg) {
  $link = '<p>' . t('<a href="!url">Read the TFA configuration documentation</a> on drupal.org.', array('!url' => url('http://drupal.org/node/1663240'))) . '</p>';
  switch ($path) {
    case 'admin/help#tfa':
      $output = '';
      $output .= '<h3>' . t('Two-factor Authentication') . '</h3>';
      $output .= '<p>' . t("TFA requires a communication channel to transfer the login code and an address to send to. By default, TFA will use the SMS Framework if installed. Add a user field to store phone numbers to enable TFA.") . '<p>';
      $output .= $link;
      return $output;
    case 'admin/config/people/tfa':
      $output = '<p>' . t('For TFA to properly function you must select a communication channel for the TFA code. If using the SMS Framework create and select a user account field that contains the number to use.') . '</p>';
      $output .= $link;
      $output .= '<p>' . t('Note, unless you choose the "Require TFA process" option users will <strong>only be required to follow the TFA process</strong> if they have an address setup for code delivery.') . '</p>';
      return $output;
  }
}

/**
 * Generate a hash for this account for the TFA login form.
 *
 * @param object $account User account.
 * @return string Random hash.
 */
function tfa_login_hash($account) {
  $data = implode(':', array($account->name, $account->pass, $account->login));
  return drupal_hash_base64($data);
}

/**
 * Generate the code for TFA.
 *
 * @param object $account User account.
 * @return string Random code or "nonce".
 */
function tfa_generate_code($account) {
  $code_length = variable_get('tfa_code_length', 6);
  // Generate a randomized string of characters.
  $code = substr(str_shuffle(str_repeat("123456789abcdefghjkmnpqrstuvwxyz", 5)), 0, $code_length);
  return $code;
}

/**
 * Send the code to the user.
 *
 * @param object $account User account.
 * @return bool True or False if the code was sent on the secondary channel.
 */
function tfa_send_code($account) {
  $entry = tfa_get_code($account->uid);
  $code = $entry['code']; // Actual code is element 'code'.
  $message = check_plain(variable_get('tfa_send_message', 'Login code'));

  // Variable send method, defaults to TFA method using SMS Framework.
  $module = variable_get('tfa_channel', 'sms');
  $function = $module . '_tfa_api';
  if (!empty($module) && function_exists($function)) {
    $channel = $function();
    $function = $channel['send callback'];
    $result = $function($account, $code, $message);
    return $result;
  }
  return FALSE;
}

/**
 * Store the code for state control
 *
 * @param int $uid UID of account.
 * @param string $code Code to store.
 * @return SAVED_NEW, SAVED_UPDATED or False.
 */
function tfa_store_code($uid, $code) {
  $previous_code = tfa_get_code($uid);
  $record = array(
    'uid' => $uid,
    'code' => $code,
    'accepted' => 0,
    'created' => REQUEST_TIME,
  );
  if (empty($previous_code)) {
    return drupal_write_record('tfa', $record);
  }
  else {
    return drupal_write_record('tfa', $record, array('uid'));
  }
}

/**
 * Mark a code as accepted.
 *
 * @param int $uid UID of account.
 */
function tfa_accept_code($uid) {
  db_update('tfa')
  ->fields(array(
    'accepted' => 1,
  ))
  ->condition('uid', $uid)
  ->execute();
}

/**
 * Delete a code for a user.
 *
 * @param int $uid UID of account.
 */
function tfa_delete_code($uid) {
  db_delete('tfa')
  ->condition('uid', $uid)
  ->execute();
}

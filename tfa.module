<?php

/**
 * @file Two-factor authentication for Drupal.
 */

/**
 * Implements hook_menu().
 */
function tfa_menu() {
  $items['system/tfa/%/%'] = array(
    'title' => 'Two-Factor Authentication',
    'page callback' => 'tfa_begin_form',
    'page arguments' => array(2, 3),
    'access callback' => 'tfa_entry_access',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'tfa.pages.inc',
  );
  $items['admin/config/people/tfa'] = array(
    'title' => 'Two-factor Authentication',
    'description' => 'TFA process settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_admin_settings'),
    'access arguments' => array('admin tfa settings'),
    'file' => 'tfa.pages.inc',
  );
  return $items;
}

/**
 * Validate access to TFA code entry form.
 */
function tfa_entry_access($uid, $check_hash) {
  // Generate a hash for this account.
  $account = user_load($uid);
  $hash = tfa_login_hash($account);
  // Hash must be valid and the code must have been created within the day.
  // @todo get something from context
  return ($hash === $check_hash);// && !empty($code) && ($code['created'] > REQUEST_TIME - 86400);
}

/**
 * Implements hook_permission().
 */
function tfa_permission() {
  return array(
    'skip tfa' => array(
      'title' => t('Skip TFA process'),
      'description' => t('Skip the Two-factor authentication process and authenticate as normal.'),
    ),
    'admin tfa settings' => array(
      'title' => t('Administer TFA'),
      'description' => t('Configure the TFA process'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Get account's TFA plugin.
 *
 * @param  $account
 * @return string
 *   Class of TfaPlugin
 */
function tfa_get_plugin($account) {
  $result = db_query("SELECT plugin FROM {tfa} WHERE uid = :uid", array(':uid' => $account->uid))->fetchAssoc();
  if (!empty($result)) {
    return $result;
  }
  return FALSE;
}

/**
 * Get systems active plugins.
 *
 * @return array
 */
function tfa_get_active_plugins() {
  return array(
    'login' => variable_get('tfa_login_plugin', ''),
    'validate' => variable_get('tfa_validate_plugin', ''),
    'fallback' => variable_get('tfa_fallback_plugins', array()),
  );
}

/**
 * Set context for account's TFA process.
 * @param $account User account
 * @param array $context Context array
 *   @see tfa_get_context for format
 */
function tfa_set_context($account, $context) {
  $_SESSION['tfa'][$account->uid] = $context;
  $_SESSION['tfa'][$account->uid]['uid'] = $account->uid;
  // Clear existing static TFA process.
  drupal_static_reset('tfa_get_process');
}

/**
 * Context for account TFA process.
 * @param $account User account
 * @return array
 *   array(
 *     'uid' => 9,
 *     'plugins' => array(
 *       'login' => 'TfaLoginPlugin',
 *       'validate' => 'TfaSendPlugin',
 *       'fallback' => array('TfaRecoveryCode'),
 *     ),
 */
function tfa_get_context($account) {
  if (isset($_SESSION['tfa'][$account->uid])) {
    return $_SESSION['tfa'][$account->uid];
  }
  else {
    $context = array('uid' => $account->uid, 'plugins' => array());
    // @todo check if account's can set their own plugin
    $plugin = tfa_get_plugin($account);
    foreach (module_invoke_all('tfa_api') as $key => $data) {
      if ($plugin === $key) {
        $context['plugins']['validate'] = $data['class'];
      }
    }
    // Add system plugins.
    $context['plugins'] = array_merge(tfa_get_active_plugins(), $context['plugins']);
    return $context;
  }
  return array();
}

function tfa_get_process($account) {
  $tfa = &drupal_static(__FUNCTION__);
  if (!isset($tfa)) {
    $context = tfa_get_context($account);
    $plugins = $context['plugins'];
    $tfa = new Tfa($plugins, $context);
  }
  return $tfa;
}

/**
 * Implements hook_tfa_api() for itself.
 */
function tfa_tfa_api() {
  // @todo here for testing
  return array(
    'tfa_email' => array(
      'class' => 'TfaEmail',
      'name' => 'Email',
    ),
    'tfa_deviceauth' => array(
      'class' => 'TfaDeviceAuth',
      'name' => 'Remember device',
    ),
    'tfa_totp' => array(
      'class' => 'TfaTotp',
      'name' => 'TOTP',
    ),
    'tfa_recovercode' => array(
      'class' => 'TfaRecoveryCode',
      'name' => 'Recovery codes',
    ),
  );
}

/**
 * Check if login should be interrupted for authenticating account.
 *
 * @param $account User account
 * @return bool
 */
function tfa_login_allowed($account) {
  // TFA master login allowed switch is set by tfa_login().
  if (isset($_SESSION['tfa'][$account->uid]['login']) && $_SESSION['tfa'][$account->uid]['login'] === TRUE) {
    return TRUE;
  }
  // Check if login plugins will allow login.
  $tfa = tfa_get_process($account);
  return $tfa->loginAllowed() === TRUE;
}

/**
 * Implements hook_user_login().
 */
function tfa_user_login(&$edit, $account) {
  global $user;

  $tfa = tfa_get_process($account);
  if (variable_get('tfa_required', 0) && !user_access('skip tfa', $account) && !$tfa->ready()) {
    tfa_logout();
    drupal_set_message(t('Login disallowed till your account is setup for TFA. Contact a site administrator.'), 'error');
    drupal_goto('user');
  }
  elseif (!user_access('skip tfa', $account) && !tfa_login_allowed($account)) {
    // Log out user and restart flood events.
    tfa_logout();
    flood_clear_event('tfa_validate');
    flood_register_event('tfa_begin');

    $login_hash = tfa_login_hash($account);

    // Hold onto destination and unset GET parameter. @todo put into context?
    $query = drupal_get_query_parameters();
    if (arg(0) == 'user' && arg(1) == 'reset') {
      // If one-time login reset destination and hold onto token.
      $query['destination'] = 'user/' . $account->uid . '/edit';
      $query['pass-reset-token'] = arg(4);
    }
    unset($_GET['destination']);
    drupal_goto('system/tfa/' . $account->uid . '/' . $login_hash, array('query' => $query));
  }
}

/**
 * Unathenticate the user. Similar to user_logout() but doesn't redirect.
 */
function tfa_logout() {
  global $user;
  watchdog('tfa', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();
  // Force anonymous user.
  $user = drupal_anonymous_user();
}

/**
 * Authenticate the user.
 *
 * @param $account User account object.
 */
function tfa_login($account) {
  global $user;

  $user = $account;
  // Update the user table timestamp noting user has logged in.
  $user->login = REQUEST_TIME;
  db_update('users')
    ->fields(array('login' => $user->login))
    ->condition('uid', $user->uid)
    ->execute();

  // Regenerate the session ID to prevent against session fixation attacks.
  drupal_session_regenerate();

  watchdog('tfa', 'Session opened for %name.', array('%name' => $user->name));
  // Set master authenticated context.
  $_SESSION['tfa'][$user->uid]['login'] = TRUE;

  // Truncate flood for user.
  flood_clear_event('tfa_send');
  flood_clear_event('tfa_validate');
  $edit = array();
  user_module_invoke('login', $edit, $user);
}

/**
 * Implements hook_help().
 */
function tfa_help($path, $arg) {
  $link = '<p>' . t('<a href="!url">Read the TFA configuration documentation</a> on drupal.org.', array('!url' => url('http://drupal.org/node/1663240'))) . '</p>';
  // @todo out of date
  /*switch ($path) {
    case 'admin/help#tfa':
      $output = '';
      $output .= '<h3>' . t('Two-factor Authentication') . '</h3>';
      $output .= '<p>' . t("TFA requires a communication channel to transfer the login code and an address to send to. By default, TFA will use the SMS Framework if installed. Add a user field to store phone numbers to enable TFA.") . '<p>';
      $output .= $link;
      return $output;
    case 'admin/config/people/tfa':
      $output = '<p>' . t('For TFA to properly function you must select a communication channel for the TFA code. If using the SMS Framework create and select a user account field that contains the number to use.') . '</p>';
      $output .= $link;
      $output .= '<p>' . t('Note, unless you choose the "Require TFA process" option users will <strong>only be required to follow the TFA process</strong> if they have an address setup for code delivery.') . '</p>';
      return $output;
  }*/
}

/**
 * Generate account hash to access the TFA form.
 *
 * @param object $account User account.
 * @return string Random hash.
 */
function tfa_login_hash($account) {
  $data = implode(':', array($account->name, $account->pass, $account->login));
  // @todo include something from context
  return drupal_hash_base64($data);
}

<?php

/**
 * @file tfa.test.
 * Drupal test cases for TFA.
 */

/**
* Tests the functionality of the TFA module.
*/
class TfaTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Two-factor Authentication',
      'description' => 'Test the Two-factor authentication process.',
      'group' => 'TFA',
    );
  }

  public function setUp() {
    // Enable TFA module and the test module.
    parent::setUp('tfa', 'tfa_test');
  }

  public function testAuthentication() {
    // Enable test plugin.
    variable_set('tfa_validate_plugin', 'TfaTestSend');
    $code = $this->randomName();
    variable_set('tfa_test_code', $code);

    $account = $this->drupalCreateUser(array());

    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));
    // Get login hash. Could user tfa_login_hash() but would require reloading
    // account.
    $url_parts = explode('/', $this->url);
    $login_hash = array_pop($url_parts);

    // Check that TFA process has begun.
    $this->assertText('Enter sent code', 'The send code input appears');
    // Confirm no fallback button.
    $this->assertNoFieldById('edit-fallback', '', 'Fallback button does not appear');
    $this->assertNoText('My account', 'Authenticated text does not appear');
    // Confirm validation error.
    $edit = array(
      'code' => $this->randomName(),
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    $this->assertText('Invalid sent code', 'Error message appears for random code');
    // Check resend text.
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, array(), t('Resend'));
    $this->assertText('Code resent', 'Resent message appears');
    // Confirm login.
    $edit = array(
      'code' => $code,
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    $this->assertText('My account', 'Authenticated text appears');

    $this->drupalGet('user/logout');

    // Enable TOTP and two fallback.
    variable_set('tfa_validate_plugin', 'TfaTestTotp');
    variable_set('tfa_fallback_plugins', array('TfaTestSend', 'TfaTestFallback'));

    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $url_parts = explode('/', $this->url);
    $login_hash = array_pop($url_parts);

    // Check that TOTP has begun.
    $this->assertText('TOTP code', 'TOTP code appears');
    $this->assertFieldById('edit-fallback', '', 'Fallback button appears');
    // Begin fallback.
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, array(), $this->uiStrings('fallback-button'));
    $this->assertText('Enter sent code', 'The send code input appears');
    // Second fallback.
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, array(), $this->uiStrings('fallback-button'));
    $this->assertText('Enter recovery code', 'The recovery code input appears');
    // Confirm validation error.
    $edit = array(
      'recover' => $this->randomName(),
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    $this->assertText('Invalid recovery code', 'Error message appears for random code');
    // Confirm login.
    $edit = array(
      'recover' => 'FAILSAFE',
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    $this->assertText('My account', 'Authenticated text appears');
  }

  public function testFloodControl() {
    // Enable test plugin.
    variable_set('tfa_validate_plugin', 'TfaTestSend');
    // Set the TFA hourly flood threshold.
    $hourly_threshold = 3;
    variable_set('tfa_hourly_threshold', $hourly_threshold);
    $account = $this->drupalCreateUser(array());

    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));

    // Check TFA validation flood.
    $url_parts = explode('/', $this->url);
    $login_hash = array_pop($url_parts);
    $edit = array(
      'code' => $this->randomName(),
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    $this->assertText('Invalid sent code', 'Error message appears for random code');
    // Hit flood limit.
    for ($i = 1; $i < $hourly_threshold; $i++) {
      $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'));
    }
    $this->drupalGet('system/tfa/' . $account->uid . '/' . $login_hash); // Not sure why this is necessary.
    $this->assertText($this->uiStrings('flood-validate'), 'The validation flood text appears');
  }

  public function testRedirection() {
    // Enable test plugin.
    variable_set('tfa_validate_plugin', 'TfaTestSend');
    $code = $this->randomName();
    variable_set('tfa_test_code', $code);

    $account = $this->drupalCreateUser(array());

    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw,
    );
    // Set destination to filter tips page.
    $options = array('query' => array('destination' => 'filter/tips'));
    $this->drupalPost('user/login', $edit, t('Log in'), $options);
    // Reload account since login timestamp is updated.
    $account = user_load($account->uid);
    $login_hash = tfa_login_hash($account);

    // Authenticate with code.
    $edit = array(
      'code' => $code,
    );
    $this->drupalPost('system/tfa/' . $account->uid . '/' . $login_hash, $edit, t('Submit'), $options);
    $this->assertText('My account', 'Authenticated text appears');
    // Confirm user is on filter tips page.
    $this->assertText('Compose tips', 'Redirected page text appears');

    // @todo test one-time login redirection.
  }

  /**
   * TFA module user interface strings.
   *
   * @param string Identifying string
   * @return string
   */
  protected function uiStrings($id) {
    switch ($id) {
      case 'fallback-button':
        return "Can't access your account?";
      case 'flood-validate':
        return 'You have reached the threshold for incorrect code entry attempts. Please try again later.';
    }
  }
}
